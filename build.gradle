apply plugin: 'java'

group = 'hamilton108'
archivesBaseName = 'rapanui'
version = '1.0'

apply from: '/home/rcs/opt/java/gradlecommon/depversions.gradle'

configurations {
    aspectjTask
}

ext {
    myLibName = "rapanui-${version}.jar"
    parentDist = '/home/rcs/opt/java/rapanui/dist'
}

/*
subprojects {
    task copyToParentProject(type: Copy, dependsOn: jar) {
        into parentDist from myLibName
    }
}

allprojects {
    println "In root for $project.name"
    task copyConfig(type: Copy) {
        ext.configDirName = "etc"
        from "src/main/config"
        into {
            println "Destination for $project.name is $configDirName"
            configDirName
        }
    }
}
//*/



sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':oahu')
    compile project(':critter-repos')
    compile project(':netfonds-repos')


    //------------------- Colt -------------------

    //------------------- MongoDB -------------------

    //------------------- Mail, Html etc -------------------
    compile "javax.mail:mail:$mailVersion"
    compile "net.sourceforge.htmlunit:htmlunit:$htmlunitVersion"
    compile "log4j:log4j:$log4jVersion"
    compile "org.slf4j:slf4j-log4j12:1.7.10"

    //compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "args4j:args4j:$args4jVersion"
    compile "org.quartz-scheduler:quartz:$quartzVersion"


    //------------------------ Spring ------------------------
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-aop:$springVersion"

    //------------------- Database -------------------
    runtime "org.mybatis:mybatis:$mybatisVersion"
    runtime "org.postgresql:postgresql:$postgresVersion"

    //------------------- Aspectj -------------------
    runtime "org.aspectj:aspectjrt:$aspectjVersion"
    aspectjTask "org.aspectj:aspectjrt:$aspectjVersion"
    aspectjTask "org.aspectj:aspectjweaver:$aspectjVersion"
    aspectjTask "org.aspectj:aspectjtools:$aspectjVersion"
    
    //------------------- test -------------------
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
    //testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"

}

task copyDeps(type: Copy) {
    into 'dist' from configurations.runtime
}

task buildAndCopy(type: Copy, dependsOn: build) {
    description 'Builds jar and copies into dist'
    into 'dist' from new File("$libsDir/$myLibName")
}


String clazzPath(removeSubProjects) {
    def runt = configurations.runtime.files.collect { f ->
        f.name
    }

    println "Removing " + myLibName
    runt.remove(myLibName)

    if (removeSubProjects == true) {
        project.getSubprojects().each { s ->
            def subJarName = s.jar.archiveName
            println "Removing " + subJarName
            runt.remove(subJarName)
        }
    }

    runt.add(".")
    runt.join(" ")
}

/*
task printMyClazzPath <<  {
    println clazzPath()
}
*/


//---------------------------- AOP ----------------------------------

static String classHomeFor(curProject) {
    def curHome = curProject.projectDir
    return "$curHome/build/classes/java/main"
}
String subProjectsClassPaths() {
    def jars = []
    project.getSubprojects().each { s ->
        jars.add(classHomeFor(s))
    }
    jars.join(":")
}

/*
compileJava << {
    println "In compileAop task"
    def aopcp = configurations.compile.asPath << ":" << configurations.aspectjTask.asPath
    ant.taskdef(resource: 'org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties',
            classpath: configurations.aspectjTask.asPath)
    ant.iajc(inpath: classesHome, // + ":" + subProjectsClassPaths(),
            source: '1.8',
            target: '1.8',
            destDir: targetClassesHome,
            sourceRoots: aspectHome,
            classpath: aopcp)
}
*/

task aopClazzPath << {
    def r = configurations.aspectjTask.asPath //<< configurations.runtime.asPath
    println r
    /*
    r.each {
        println it
    }
    */
}
//---------------------------- AOP End ----------------------------------


task sjar(type: Jar, dependsOn: compileJava) {
    manifest {
        attributes 'Main-Class': "rapanui.App"
        attributes 'Class-Path': clazzPath(false)
    }
    destinationDir = new File("./dist")
    with jar
}

task aopjar(type: Jar, dependsOn: compileJava) {
    manifest {
        attributes 'Main-Class': "rapanui.App"
        attributes 'Class-Path': clazzPath(false)
    }
    destinationDir = new File("./dist")
    from("target/classes") include "**/*.class"
    //from("src/main/resources") include "*.xml"
}

def symlinkResource(resourceName,isLocal) {
    def loc = isLocal == true ? "local" : "src/main/resources"
    def fromPath = "../${loc}/${resourceName}"
    def syml = "dist/${resourceName}"

    ant.symlink(resource: fromPath, link: syml)
}

task setupDist << {
    /*
    ant.symlink(resource: "../src/main/resources/log4j.xml", link: "dist/log4j.xml")
    ant.symlink(resource: "../src/main/resources/mybatis.conf.xml", link: "dist/mybatis.conf.xml")
    ant.symlink(resource: "../src/main/resources/rapanui.xml", link: "dist/rapanui.xml")
    ant.symlink(resource: "../src/main/resources/rapanui-test.xml", link: "dist/rapanui-test.xml")
    ant.symlink(resource: "../local/runjar", link: "dist/runjar")
    ant.symlink(resource: "../local/critters-dbcp.properties", link: "dist/critters-dbcp.properties")
    */
    symlinkResource("log4j.xml",false)
    symlinkResource("mybatis.conf.xml",false)
    symlinkResource("rapanui.xml",false)
    symlinkResource("rapanui-test.xml",false)
    symlinkResource("runjar",true)
    symlinkResource("critters-dbcp.properties",true)
}

